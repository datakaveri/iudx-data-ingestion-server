openapi: 3.0.2


schemes:
  - "http"
  - "https"

produces:
  - "application/json"
  - "text/plain"

consumes:
  - "application/json"
  - "text/plain"


info:
  title: Data Exchange Data Ingestion Server APIs
  version: 5.5.0
  description: >
    # Introduction

    The <b>Data Ingestion Server</b> is the <b> DXs'(Data Exchange) "Firewall"</b> which allows publication of
    data.
    It enables *Providers* and *Delegate* of datasources to publish data as
    per the DX(Data Exchange) data descriptor.

    For publication, it allows users to use <b>HTTP protocol over TLS (HTTPs)</b>.

    # Configurations

    -  <b>Server</b>: 
          - In the doc, we display the server url to be https://example-di.com with the hostname as example-di.com
          - This could be configured according to the deployment
    - **Base path**:
        - Base path is the path on which API is served, relative to the host
        - It is the initial part of the API
        - These base path values could be configured according to the deployment
        - The base path for [DX AAA Server](https://github.com/datakaveri/iudx-aaa-server) is set to `/auth/v1`
        - The base path for [DX Catalogue Server](https://github.com/datakaveri/iudx-catalogue-server) is set to `/iudx/cat/v1`
        - Currently, the following APIs have `/ngsi-ld/v1` base path
            -  /entities
            -  /ingestion
          <br>
    - **Request Samples**:
        - The `<tokeValue>` in the header of request sample could be replaced with respective token value [Also refer Tokens section [here](#section/Tokens)]
        - The `<payload>` in the request sample could be replaced with the payload given adjacent to the request sample



    # Tokens
    
    All the API calls to the data ingestion server should contain a valid DX auth token presented in the header. These tokens could be obtained from DX Auth Server.
    
    
    # API HTTP Responses

    Apart from the response codes specified in each API, the API server may
    respond with certain 4xx and 5xx error codes which are related to common API
    Gateway behaviours.

    The application should address them accordingly.
  

  contact:
    name: For support contact IUDX Team at
    email: support@iudx.org.in
    url: https://iudx.org.in/
  license:
    name: Apache 2.0

tags:
  - name: Data Ingestion
    x-displayName: "Data Ingestion Stream"
    description: |
      Register or delete data ingestion streams using HTTPs APIs. Once registered, the user can publish data through publish(`/entities`) API as per the DX data descriptor.
      These apis are intended to be used by DX *Administrator*.

  - name: Publish Resource Data
    x-displayName: "Publish Resource Data"
    description: |
      Publish Resource data to the created ingestion stream. A provider can use these API to publish resource data periodically over time or as according the resource. User is strictly required to follow the mandatory attribute and values defined in the DX catalogue while publishing data.
      These apis are intended to be used by DX *Providers*.

servers:
  - url: 'https://example-di.com/ngsi-ld/v1'
    description: 'Development Server URL'


paths:
  /ingestion:
    post:
      tags:
        - Data Ingestion
      operationId: Register data ingestion stream
      parameters:
        - name: token
          in: header
          required: true
          description: >
            A <b> valid DX Auth token </b> to process the request for the <b>
            protected API </b> . <br/> This field is <b> mandatory </b> for
            accessing a <b> protected API </b> .  <br/> If not provided
            with a valid token, user will be responded with <b> 401 Unauthorized
            </b> .
          schema:
            type: string
            maxLength: 512
            pattern: ^[a-zA-Z0-9\/\@\.]*$


      x-codeSamples:
        - lang: 'cURL'
          label: 'register data ingestion stream'
          source: |
            curl --location --request POST 'https://example-di.com/ngsi-ld/v1/ingestion' \
            --header 'token: <tokenValue>' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'


      requestBody:
        description: >
          A <b> valid DX ID </b> of the resource is mandatory. <b>Queue</b> is
          optional
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postingestionrequest'
      responses:
        '201':
          description: Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardCreateSuccessResponse'
        '204':
          description: Empty Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardBadRequestErrorResponse'
          description: Bad query
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardInvalidTokenErrorResponse'
          description: Unauthorized
      deprecated: false
      description: >
        The `/ingestion` end point allows an DX Admin to register ingestion
        stream for one or more data resources. All the queries requires a <b> valid DX </b> `id` of
        the resource.

    delete:
      tags:
        - Data Ingestion
      operationId: Delete data ingestion stream
      parameters:
        - name: token
          in: header
          required: true
          description: >
            A <b> valid DX Auth token </b> to process the request for the <b>
            protected API </b> . <br/> This field is <b> mandatory </b> for
            accessing a <b> protected API </b> .  <br/> If not provided
            with a valid token, user will be responded with <b> 401 Unauthorized
            </b> .
          schema:
            type: string
            maxLength: 512
            pattern: ^[a-zA-Z0-9\/\@\.]*$
        - name: id
          in: query
          description: >
            A <b> valid DX ID </b> of the resource.
          required: true
          schema:
            type: string
            format: uuid


      x-codeSamples:
        - lang: 'cURL'
          label: 'delete data ingestion stream'
          source: |
            curl --location --request DELETE 'https://example-di.com/ngsi-ld/v1/ingestion?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information' \
            --header 'token: <tokenValue>' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'

      requestBody:
        description: >
          A <b> valid DX ID </b> of the resource. Mandatory attributes and
          values as per the data descriptor in the DX Catalogue
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postingestionrequest'

      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardDeleteSuccessResponse'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardBadRequestErrorResponse'
          description: Bad query
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardInvalidTokenErrorResponse'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardResourceNotFoundErrorResponse'
          description: Resource not found
      deprecated: false
      description: >
        The `/ingestion` end point allows an DX Admin to delete ingestion
        stream for one or more data resources. All the queries requires a <b> valid DX </b> `id` of
        the resource. These apis are intended to be used by DX *Administrator*.

  /entities:
    post:
      tags:
        - Publish Resource Data
      operationId: Publish data
      parameters:
        - name: token
          in: header
          description:
            A <b> valid DX Auth token </b> to process the request for a <b>
            resource </b> . <br/> This field is <b> mandatory </b> for
            publishing a <b> protected resource </b> .  <br/> If not provided
            with a valid token, user will be responded with <b> 401 Unauthorized
            </b>.
          required: true
          schema:
            type: string
            maxLength: 512
            pattern: ^[a-zA-Z0-9\/\@\.]*$

      x-codeSamples:
        - lang: 'cURL'
          label: 'publish data'
          source: |
            curl --location --request POST 'https://example-di.com/ngsi-ld/v1/entities' \
            --header 'token: <tokenValue>' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'

      requestBody:
        description: >
          A <b> valid DX ID </b> of the resource is always required in the body of the message. Mandatory attributes and
          values as per the data descriptor in the DX Catalogue. 
          A Sample is shown below for some resource according to their data descriptor defined in DX catalogue server.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postentityrequest'
      responses:
        '201':
          description: Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityresponse'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardBadRequestErrorResponse'
          description: Bad query
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardInvalidTokenErrorResponse'
          description: Unauthorized
      deprecated: false
    description: >
      A Post Entity API is used by <b>DX Data *Providers* and *Delegate*</b> to publish data into the DX platform. <br/> As the POST method of the <b>/entities</b> endpoint is a protected endpoint a<b> valid DX Auth token </b> is <b> mandatory </b>  in the header parameter of the request.<br/> The request body for this API shall contain the data to be published in JSON format as per the data-descriptor available in <b>DX catalogue server


components:
  schemas:
    postentityrequest:
      title: postentityrequest
      required:
        - currentLevel
        - referenceLevel
        - measuredDistance
        - id
        - observationDateTime
        - deviceInfo
      type: object
      properties:
        currentLevel:
          type: number
          maxLength: 50
        referenceLevel:
          type: number
          maxLength: 50
        id:
          type: string
          format: uuid
        measuredDistance:
          type: number
          maxLength: 50
        observationDateTime:
          type: string
          maxLength: 50
        deviceInfo:
          type: array
          items :
            type: string
            maxLength : 50

          maxLength: 50
      example:
        {
          "currentLevel": 100.16,
          "referenceLevel": 15.9,
          "measuredDistance": 14.74,
          "id": "33b75d3e-bc65-40e5-97e4-ad4e99f60354",
          "observationDateTime": "2020-09-20T18:30:00+05:30",
          "deviceInfo": {
            "deviceID": "FWR055"
          }
        }
    postingestionrequest:
      title: postingestionrequest
      required:
        - id
        - queue
      type: object
      properties:
        id:
          type: string
          format: uuid
        queue:
          type: string
          maxLength: 50
      example:
        {
          "id": "33b75d3e-bc65-40e5-97e4-ad4e99f60354",
          "queue": "test/ingestion/testing"
        }
    standardCreateSuccessResponse:
      title: standardCreateSuccessResponse
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        results:
          description: An array of objects
          type: array
          items:
            type: object
      example:
        type: urn:dx:rs:success
        title: success
        results: [
          {
            "detail":"Creation of resource group and queue successful,Ingest data operation successful"
          }]
    standardDeleteSuccessResponse:
      title: standardDeleteSuccessResponse
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        results:
          description: An array of objects
          type: array
          items:
            type: object
      example:
        type: urn:dx:rs:success
        title: success
        results: [
          {
            "detail":"Deletion of resource group and queue successful"
          }]
    entityresponse:
      title: entityresponse
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        results:
          description: An array of objects
          type: array
          items:
            type: object
      example:
        type: urn:dx:rs:success
        title: success
        results: [
          {
            "detail": "message published successfully,ingestion success"
          }]
    standardBadRequestErrorResponse:
      title: standardBadRequestErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: urn:dx:rs:badRequest
        title: Bad request
        detail: Bad query
    standardInvalidTokenErrorResponse:
      title: standardInvalidTokenErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: urn:dx:rs:invalidAuthorizationToken
        title: Unauthorized
        detail: Unauthorized
    standardResourceNotFoundErrorResponse:
      title: standardResourceNotFoundErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: urn:dx:rs:resourceNotFound
        title: Resource not in Catalogue.
        detail: Resource Not Found